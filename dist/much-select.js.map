{"version":3,"sources":["diacritics.js","ascii-fold.js","much-select.js"],"names":["diacritics","Map","set","asciiFold","buildAsciiFoldLookup","_diacritics","i","n","chunk","foreignLetters","lookup","k","letters","substring","length","charAt","buildAsciiFold","regexp","RegExp","str","replace","foreignletter","toLowerCase","MuchSelect","buildOptionsFromSelectElement","selectElement","options","querySelectorAll","forEach","optionElement","optionIndex","value","option","hasAttribute","getAttribute","innerText","label","labelClean","index","optionSelectedValue","selected","parentElement","tagName","group","dataset","description","descriptionClean","disabled","push","notNullOrUndefined","thing","stringToOptionObject","numberToOptionObject","num","cleanUpOption","optionMap","TypeError","Math","floor","has","get","cleanUpOptions","map","HTMLElement","_selected","_placeholder","_disabled","_loading","_maxDropdownItems","_app","_onSlotChange","bind","name","oldValue","newValue","updateDimensions","placeholder","maxDropdownItems","loading","flags","buildFlags","parentDiv","attachShadow","mode","elmDiv","document","createElement","selectMenuInputSlot","setAttribute","innerHTML","appendChild","styleTag","Elm","Main","init","node","ports","errorMessage","subscribe","errorHandler","valueChanged","valueChangedHandler","blurInput","inputFilterElement","shadowRoot","getElementById","blur","focusInput","window","requestAnimationFrame","focus","slot","querySelector","addEventListener","error","optionsJson","optionsChangedReceiver","send","console","dropdownElement","valueCasingElement","width","offsetWidth","height","offsetHeight","valueCasingDimensionsChangedReceiver","trim","size","allowMultiSelect","JSON","stringify","valuesTuple","valueTuple","join","valuesObj","dispatchEvent","CustomEvent","bubbles","detail","values","valueObj","addOptions","addOptionsReceiver","removeOptions","removeOptionsReceiver","selectOptionReceiver","deselectOptionReceiver","split","valueChangedReceiver","placeholderChangedReceiver","removeAttribute","disableChangedReceiver","parseInt","maxDropdownItemsChangedReceiver","loadingChangedReceiver"],"mappings":"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","file":"much-select.js","sourceRoot":"../src","sourcesContent":["const diacritics = new Map();\n\ndiacritics.set(\"a\", \"[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]\");\ndiacritics.set(\"b\", \"[b␢βΒB฿𐌁ᛒ]\");\ndiacritics.set(\"c\", \"[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]\");\ndiacritics.set(\"d\", \"[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]\");\ndiacritics.set(\n  \"e\",\n  \"[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]\"\n);\ndiacritics.set(\"f\", \"[fƑƒḞḟ]\");\ndiacritics.set(\"g\", \"[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]\");\ndiacritics.set(\"h\", \"[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]\");\ndiacritics.set(\"i\", \"[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]\");\ndiacritics.set(\"j\", \"[jȷĴĵɈɉʝɟʲ]\");\ndiacritics.set(\"k\", \"[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]\");\ndiacritics.set(\"l\", \"[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]\");\ndiacritics.set(\"n\", \"[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]\");\ndiacritics.set(\"o\", \"[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]\");\ndiacritics.set(\"p\", \"[pṔṕṖṗⱣᵽƤƥᵱ]\");\ndiacritics.set(\"q\", \"[qꝖꝗʠɊɋꝘꝙq̃]\");\ndiacritics.set(\"r\", \"[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]\");\ndiacritics.set(\"s\", \"[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]\");\ndiacritics.set(\"t\", \"[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]\");\ndiacritics.set(\"u\", \"[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]\");\ndiacritics.set(\"v\", \"[vṼṽṾṿƲʋꝞꝟⱱʋ]\");\ndiacritics.set(\"w\", \"[wẂẃẀẁŴŵẄẅẆẇẈẉ]\");\ndiacritics.set(\"x\", \"[xẌẍẊẋχ]\");\ndiacritics.set(\"y\", \"[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]\");\ndiacritics.set(\"z\", \"[zŹźẐẑŽžŻżẒẓẔẕƵƶ]\");\n\nexport default diacritics;\n","import diacritics from \"./diacritics.js\";\n\nconst buildAsciiFoldLookup = (_diacritics) => {\n  let i;\n  let n;\n  let chunk;\n\n  let foreignLetters = \"\";\n  const lookup = {};\n  for (const [k, letters] of _diacritics) {\n    chunk = letters.substring(2, letters.length - 1);\n    foreignLetters += chunk;\n    for (i = 0, n = chunk.length; i < n; i += 1) {\n      lookup[chunk.charAt(i)] = k;\n    }\n  }\n\n  return [foreignLetters, lookup];\n};\n\nconst buildAsciiFold = (_diacritics) => {\n  const [foreignLetters, lookup] = buildAsciiFoldLookup(_diacritics);\n\n  const regexp = new RegExp(`[${foreignLetters}]`, \"g\");\n\n  return (str) => {\n    if (!str) {\n      return \"\";\n    }\n    return str\n      .replace(regexp, (foreignletter) => {\n        return lookup[foreignletter];\n      })\n      .toLowerCase();\n  };\n};\n\nconst asciiFold = buildAsciiFold(diacritics);\n\nexport default asciiFold;\n","// noinspection ES6CheckImport\nimport { Elm } from \"./Main.elm\";\n\nimport asciiFold from \"./ascii-fold.js\";\n\nconst buildOptionsFromSelectElement = (selectElement) => {\n  const options = [];\n  const optionElements = selectElement.querySelectorAll(\"option\");\n  optionElements.forEach((optionElement, optionIndex) => {\n    let value;\n    if (optionElement.hasAttribute(\"value\")) {\n      value = optionElement.getAttribute(\"value\");\n    } else {\n      value = optionElement.innerText;\n    }\n    const option = { value };\n    option.label = optionElement.innerText;\n    option.labelClean = asciiFold(optionElement.innerText);\n    option.index = optionIndex;\n    if (optionElement.hasAttribute(\"selected\")) {\n      const optionSelectedValue = optionElement.getAttribute(\"selected\");\n      option.selected = optionSelectedValue !== \"false\";\n    }\n    if (optionElement.parentElement.tagName === \"OPTGROUP\") {\n      option.group = optionElement.parentElement.getAttribute(\"label\");\n    }\n    if (optionElement.dataset.description) {\n      option.description = optionElement.dataset.description;\n      option.descriptionClean = asciiFold(option.description);\n    }\n    option.disabled = optionElement.hasAttribute(\"disabled\");\n    options.push(option);\n  });\n  return options;\n};\n\nconst notNullOrUndefined = (thing) => thing !== null && thing !== undefined;\n\nconst stringToOptionObject = (str) => {\n  return {\n    value: str,\n    label: str,\n    labelClean: asciiFold(str),\n  };\n};\n\nconst numberToOptionObject = (num) => {\n  return {\n    value: `${num}`,\n    label: `${num}`,\n    labelClean: `${num}`,\n  };\n};\n\nconst cleanUpOption = (option) => {\n  if (typeof option === \"string\") {\n    return stringToOptionObject(option);\n  }\n  if (typeof option === \"number\") {\n    return numberToOptionObject(option);\n  }\n  if (typeof option === \"object\") {\n    const optionMap = new Map();\n    if (notNullOrUndefined(option.value)) {\n      optionMap.set(\"value\", `${option.value}`);\n    }\n\n    if (notNullOrUndefined(option.label)) {\n      optionMap.set(\"label\", `${option.label}`);\n    }\n\n    if (notNullOrUndefined(option.description)) {\n      optionMap.set(\"description\", option.description);\n    }\n\n    if (notNullOrUndefined(option.disabled)) {\n      optionMap.set(\"disabled\", !!option.disabled);\n    }\n\n    if (notNullOrUndefined(option.index)) {\n      if (typeof option.index === \"number\") {\n        optionMap.set(\"index\", Math.floor(option.index));\n      } else {\n        throw new TypeError(\"option index in not a valid value\");\n      }\n    }\n\n    if (optionMap.has(\"value\") && !optionMap.has(\"label\")) {\n      return {\n        label: optionMap.get(\"value\"),\n        labelClean: asciiFold(optionMap.get(\"value\")),\n        value: optionMap.get(\"value\"),\n        description: optionMap.get(\"description\"),\n        descriptionClean: asciiFold(optionMap.get(\"description\")),\n        disabled: optionMap.get(\"disabled\"),\n        index: optionMap.get(\"index\"),\n      };\n    }\n    if (optionMap.has(\"label\") && !optionMap.has(\"value\")) {\n      return {\n        label: optionMap.get(\"label\"),\n        labelClean: asciiFold(optionMap.get(\"label\")),\n        value: optionMap.get(\"label\"),\n        description: optionMap.get(\"description\"),\n        descriptionClean: asciiFold(optionMap.get(\"description\")),\n        disabled: optionMap.get(\"disabled\"),\n        index: optionMap.get(\"index\"),\n      };\n    }\n    return {\n      label: optionMap.get(\"label\"),\n      labelClean: asciiFold(optionMap.get(\"label\")),\n      value: optionMap.get(\"value\"),\n      description: optionMap.get(\"description\"),\n      descriptionClean: asciiFold(optionMap.get(\"description\")),\n      disabled: optionMap.get(\"disabled\"),\n      index: optionMap.get(\"index\"),\n    };\n  }\n\n  throw new TypeError(\"Invalid option\");\n};\n\nconst cleanUpOptions = (options) => options.map(cleanUpOption);\n\n// adapted from https://github.com/thread/elm-web-components\n\nclass MuchSelect extends HTMLElement {\n  constructor() {\n    super();\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this._selected = null;\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this._placeholder = null;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this._disabled = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this._loading = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._maxDropdownItems = 10000;\n\n    /**\n     * @type {null|object}\n     * @private\n     */\n    this._app = null;\n\n    this._onSlotChange = this._onSlotChange.bind(this);\n  }\n\n  static get observedAttributes() {\n    return [\n      \"selected\",\n      \"disabled\",\n      \"placeholder\",\n      \"loading\",\n      \"max-dropdown-items\",\n    ];\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"selected\") {\n      if (oldValue !== newValue) {\n        this.updateDimensions();\n        this.selected = newValue;\n      }\n    } else if (name === \"placeholder\") {\n      if (oldValue !== newValue) {\n        this.updateDimensions();\n        this.placeholder = newValue;\n      }\n    } else if (name === \"disabled\") {\n      if (oldValue !== newValue) {\n        this.disabled = newValue;\n      }\n    } else if (name === \"max-dropdown-items\") {\n      if (oldValue !== newValue) {\n        this.maxDropdownItems = newValue;\n      }\n    } else if (name === \"loading\") {\n      if (oldValue !== newValue) {\n        this.loading = newValue;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  connectedCallback() {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      const flags = this.buildFlags();\n\n      // User shadow DOM.\n      const parentDiv = this.attachShadow({ mode: \"open\" });\n\n      const elmDiv = document.createElement(\"div\");\n      const selectMenuInputSlot = document.createElement(\"slot\");\n      selectMenuInputSlot.setAttribute(\"name\", \"select-input\");\n\n      parentDiv.innerHTML = \"\";\n      parentDiv.appendChild(this.styleTag);\n      parentDiv.appendChild(elmDiv);\n      parentDiv.appendChild(selectMenuInputSlot);\n\n      // noinspection JSUnresolvedVariable\n      this._app = Elm.Main.init({\n        flags,\n        node: elmDiv,\n      });\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.errorMessage.subscribe(this.errorHandler.bind(this));\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.valueChanged.subscribe(\n        this.valueChangedHandler.bind(this)\n      );\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.blurInput.subscribe(() => {\n        const inputFilterElement = this.shadowRoot.getElementById(\n          \"input-filter\"\n        );\n        if (inputFilterElement) {\n          inputFilterElement.blur();\n        }\n      });\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.focusInput.subscribe(() => {\n        window.requestAnimationFrame(() => {\n          const inputFilterElement = this.shadowRoot.getElementById(\n            \"input-filter\"\n          );\n          if (inputFilterElement) {\n            this.shadowRoot.getElementById(\"input-filter\").focus();\n          }\n        });\n      });\n\n      const slot = this.shadowRoot.querySelector(\"slot[name=select-input]\");\n      if (slot) {\n        slot.addEventListener(\"slotchange\", this._onSlotChange);\n      }\n    } catch (error) {\n      // TODO Do something interesting here\n      throw error;\n    }\n  }\n\n  _onSlotChange() {\n    const selectElement = this.querySelector(\"select\");\n    if (selectElement) {\n      const optionsJson = buildOptionsFromSelectElement(selectElement);\n\n      // noinspection JSUnresolvedVariable\n      this._app.ports.optionsChangedReceiver.send(optionsJson);\n      this.updateDimensions();\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  errorHandler(error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n\n  /**\n   * This method updates the width this widget when it's not selected, so when\n   *  it is selected it matches the input element.\n   * This needs to be called very time the options or the values change (or\n   *  anything else that might change the height or width of the much-select.\n   * It waits for 1 frame before doing calculating what the height and width\n   *  should be.\n   */\n  updateDimensions() {\n    window.requestAnimationFrame(() => {\n      const dropdownElement = this.shadowRoot.getElementById(\"dropdown\");\n      const valueCasingElement = this.shadowRoot.getElementById(\"value-casing\");\n      if (dropdownElement && valueCasingElement) {\n        let width = dropdownElement.offsetWidth;\n        let height = valueCasingElement.offsetHeight;\n\n        // Clamp the width between some min and max.\n        // TODO this min and max should probably not be hard coded here.\n        if (width < 100) {\n          width = 100;\n        } else if (width > 500) {\n          width = 500;\n        }\n\n        // Clamp the width between some min and max.\n        // TODO this min and max should probably not be hard coded here.\n        if (height < 20) {\n          height = 20;\n        }\n\n        // noinspection JSUnresolvedVariable\n        this._app.ports.valueCasingDimensionsChangedReceiver.send({\n          width,\n          height,\n        });\n      }\n    });\n  }\n\n  buildFlags() {\n    const flags = {};\n    if (this.selected) {\n      flags.value = this.selected;\n    } else {\n      flags.value = \"\";\n    }\n\n    if (this.hasAttribute(\"placeholder\")) {\n      flags.placeholder = this.getAttribute(\"placeholder\").trim();\n    } else {\n      flags.placeholder = \"\";\n    }\n\n    if (this.hasAttribute(\"size\")) {\n      flags.size = this.getAttribute(\"size\").trim();\n    } else {\n      flags.size = \"\";\n    }\n\n    if (this.hasAttribute(\"multi-select\")) {\n      flags.allowMultiSelect = this.getAttribute(\"multi-select\") !== \"false\";\n    } else {\n      flags.allowMultiSelect = false;\n    }\n\n    flags.disabled = this.disabled;\n    flags.loading = this.loading;\n    flags.maxDropdownItems = this.maxDropdownItems;\n\n    const selectElement = this.querySelector(\"select\");\n    if (selectElement) {\n      flags.optionsJson = JSON.stringify(\n        buildOptionsFromSelectElement(selectElement)\n      );\n    } else {\n      flags.optionsJson = JSON.stringify([]);\n    }\n\n    if (this.hasAttribute(\"selected\")) {\n      flags.value = this.getAttribute(\"selected\");\n    }\n\n    return flags;\n  }\n\n  valueChangedHandler(valuesTuple) {\n    // TODO perhaps this delimiter should be configurable\n    this.selected = valuesTuple.map((valueTuple) => valueTuple[0]).join(\",\");\n    this.updateDimensions();\n    if (\n      this.hasAttribute(\"multi-select\") &&\n      this.getAttribute(\"multi-select\") !== \"false\"\n    ) {\n      // If we are in mulit select mode put the list of values in the event.\n      const valuesObj = valuesTuple.map((valueTuple) => {\n        return { value: valueTuple[0], label: valueTuple[1] };\n      });\n      this.dispatchEvent(\n        new CustomEvent(\"valueChanged\", {\n          bubbles: true,\n          detail: { values: valuesObj },\n        })\n      );\n    } else if (valuesTuple.length === 0) {\n      // If we are in single select mode and the value is empty.\n      this.dispatchEvent(\n        new CustomEvent(\"valueChanged\", {\n          bubbles: true,\n          detail: { value: null },\n        })\n      );\n    } else if (valuesTuple.length === 1) {\n      // If we are in single select mode put the list of values in the event.\n      const valueObj = { value: valuesTuple[0][0], label: valuesTuple[0][1] };\n      this.dispatchEvent(\n        new CustomEvent(\"valueChanged\", {\n          bubbles: true,\n          detail: { value: valueObj },\n        })\n      );\n    } else {\n      // If we are in single select mode and there is more than one value then something is wrong.\n      throw new TypeError(\n        `In single select mode we are expecting a single value, instead we got ${valuesTuple.length}`\n      );\n    }\n  }\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(value) {\n    this.setAttribute(\"selected\", value);\n\n    if (value) {\n      // TODO perhaps this delimiter should be configurable\n      const values = value.split(\",\");\n\n      // TODO Convert this._app to a function that get a promise that returns _app\n      //  when it is ready.\n      // noinspection JSUnresolvedVariable\n      this._app.ports.valueChangedReceiver.send(values);\n    } else {\n      // TODO Convert this._app to a function that get a promise that returns _app\n      //  when it is ready.\n      // noinspection JSUnresolvedVariable\n      this._app.ports.valueChangedReceiver.send([]);\n    }\n  }\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(placeholder) {\n    this.setAttribute(\"placeholder\", placeholder);\n    // TODO Convert this._app to a function that get a promise that returns _app\n    //  when it is ready.\n    // noinspection JSUnresolvedVariable\n    this._app.ports.placeholderChangedReceiver.send(placeholder);\n\n    this._placeholder = placeholder;\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    if (value === \"false\") {\n      this._disabled = false;\n    } else {\n      this._disabled = !!value;\n    }\n\n    if (this._disabled) {\n      this.setAttribute(\"disabled\", \"disabled\");\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n    // noinspection JSUnresolvedVariable\n    this._app.ports.disableChangedReceiver.send(this._disabled);\n  }\n\n  get maxDropdownItems() {\n    return this._maxDropdownItems;\n  }\n\n  set maxDropdownItems(value) {\n    let newValue;\n    if (typeof value === \"number\") {\n      newValue = Math.floor(value);\n    } else if (typeof value === \"string\") {\n      newValue = Math.floor(parseInt(value, 10));\n    } else {\n      throw new TypeError(\"Max dropdown items must be a number!\");\n    }\n    if (newValue < 3) {\n      this._maxDropdownItems = 3;\n    } else {\n      this._maxDropdownItems = newValue;\n      this.setAttribute(\"max-dropdown-items\", newValue);\n    }\n    // noinspection JSUnresolvedVariable\n    this._app.ports.maxDropdownItemsChangedReceiver.send(\n      this._maxDropdownItems\n    );\n  }\n\n  get loading() {\n    return this._loading;\n  }\n\n  set loading(value) {\n    if (value === \"false\") {\n      this._loading = false;\n    } else {\n      this._loading = !!value;\n    }\n    if (this._loading) {\n      this.setAttribute(\"loading\", \"loading\");\n    } else {\n      this.removeAttribute(\"loading\");\n    }\n    // noinspection JSUnresolvedVariable\n    this._app.ports.loadingChangedReceiver.send(this._loading);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get styleTag() {\n    const styleTag = document.createElement(\"style\");\n    styleTag.innerHTML = `\n\n\n      :host {\n        /*\n        This web components should take up some space on the page.\n\n        TODO: Do we really have to set this by hand? Can't we do something so that\n        this gets calculated automatically? If it must be set by hand we should probably\n        do something a bit more clever here to not hard code these values so much.\n        */\n\n        min-height: 40px;\n        min-width: 200px;\n      }\n\n      /*\n      If we are using a select element in the select-input slot to manage the\n      the options do not show it.\n      */\n      slot[name='select-input'] {\n        display: none;\n      }\n\n      #wrapper {\n        margin-top: auto;\n        margin-bottom: auto;\n        position: relative;\n        max-width: 400px;\n        min-width: 200px;\n      }\n\n      /*\n        This value casing (and what's inside of it) is supposed to be the\n        \"main event\".\n      */\n      #value-casing {\n        min-height: 34px;\n        cursor: pointer;\n        overflow: hidden;\n        -moz-appearance: textfield;\n        -webkit-appearance: textfield;\n        background-color: white;\n        background-color: -moz-field;\n        border: 1px solid darkgray;\n        box-shadow: 1px 1px 1px 0 lightgray inset;\n        font: -moz-field;\n        font: -webkit-small-control;\n        padding: 4px 3px 2px 3px;\n        display: flex;\n        flex-flow: row nowrap;\n      }\n\n      #value-casing.multi {\n        flex-flow: row wrap;\n      }\n\n      #value-casing.disabled {\n        border: 1px solid lightgray;\n        cursor: pointer;\n      }\n\n      #value-casing .placeholder {\n        color: silver;\n        font-size: 25px;\n        vertical-align: middle;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        flex-basis: 1;\n      }\n\n      #value-casing #input-filter {\n        /*\n        TODO, seems like the height and font-size should not be hardcoded.\n        */\n        height: 36px;\n        font-size: 25px;\n        /* The min-width let's the input shrink down as far as it needs to.\n        The with width lets it grow as much as it can.\n        */\n        min-width: 10px;\n        width: 100%;\n        /* Let's give the input a bit more room than the selected values.\n        */\n        flex-grow: 3;\n        flex-shrink: 0;\n        flex-basis: 10%;\n        /* We don't want a border because the value-casing will supply the border for\n          this input.\n        */\n        border: none;\n      }\n\n      #value-casing.single {\n        background-image: linear-gradient(to bottom, #fefefe, #f2f2f2);\n        background-repeat: repeat-x;\n      }\n\n      #value-casing.single.disabled {\n        background-image: none;\n      }\n\n      #value-casing.multi .value {\n        padding: 3px;\n        font-size: 20px;\n        color: white;\n        background-image: linear-gradient(to bottom, #4f6a8f, #88a2bc);\n        background-repeat: repeat-x;\n        margin: 2px 2px;\n        border-radius: 5px;\n        border: 3px solid;\n        border-color: #d99477;\n        min-width: 10px;\n\n        flex-grow: 0;\n        flex-shrink: 1;\n        flex-basis: auto;\n      }\n\n      #value-casing.multi .value.selected-value {\n        background-image: linear-gradient(to bottom, #d99477, #efb680);\n        background-repeat: repeat-x;\n      }\n\n      #value-casing.single {\n        width: 100%;\n      }\n\n      #select-indicator {\n        position: absolute;\n        right: 3px;\n        top: 3px;\n        cursor: pointer;\n      }\n\n      slot[name='loading-indicator'] {\n        display: block;\n        position: absolute;\n        right: 5px;\n        top: 10px;\n      }\n\n      #clear-button-wrapper {\n        display: block;\n        position: absolute;\n        right: 3px;\n        top: 7px;\n        cursor: pointer;\n      }\n\n      #dropdown {\n        background-color: #EEEEEE;\n        visibility: hidden;\n        padding: 5px;\n        position: absolute;\n        left: 0px;\n        font-size: 20px;\n        min-width: 200px;\n        display: inline-block;\n        z-index: 10;\n        max-height: 300px;\n        overflow-y: auto;\n      }\n      #dropdown.showing {\n        visibility: visible;\n      }\n      #dropdown.hiding {\n        visibility: hidden;\n      }\n      .optgroup {\n        background-color: gray;\n        font-size: 0.85rem;\n        font-weight: 300;\n        padding: 5px;\n      }\n      .option {\n        background-color: silver;\n        padding: 5px;\n        cursor: pointer;\n      }\n\n      .option.selected {\n        background-color: darkslategrey;\n        color: ghostwhite;\n        cursor: pointer;\n      }\n\n      .option.highlighted {\n        background-color: indigo;\n        color: ghostwhite;\n      }\n\n      .option.disabled {\n        display: none;\n      }\n\n      .description {\n        font-size: 0.85rem;\n        padding: 3px;\n      }\n      .highlight { color: blue }`;\n\n    return styleTag;\n  }\n\n  updateOptions(options) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.optionsChangedReceiver.send(cleanUpOptions(options));\n    this.updateDimensions();\n  }\n\n  addOption(option) {\n    this.addOptions([option]);\n  }\n\n  addOptions(options) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.addOptionsReceiver.send(cleanUpOptions(options));\n    this.updateDimensions();\n  }\n\n  removeOption(option) {\n    this.removeOptions([option]);\n  }\n\n  removeOptions(options) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.removeOptionsReceiver.send(cleanUpOptions(options));\n    this.updateDimensions();\n  }\n\n  selectOption(option) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.selectOptionReceiver.send(cleanUpOption(option));\n  }\n\n  deselectOption(option) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.deselectOptionReceiver.send(cleanUpOption(option));\n  }\n}\n\nexport default MuchSelect;\n"]}