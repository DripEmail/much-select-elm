{"version":3,"sources":["much-select.js"],"names":["MuchSelect","buildOptionsFromSelectElement","selectElement","options","querySelectorAll","forEach","optionElement","optionIndex","value","option","hasAttribute","getAttribute","innerText","label","index","optionSelectedValue","selected","parentElement","tagName","group","dataset","description","disabled","push","notNullOrUndefined","thing","stringToOptionObject","str","numberToOptionObject","num","cleanUpOption","optionMap","Map","set","TypeError","Math","floor","has","get","cleanUpOptions","map","HTMLElement","_selected","_placeholder","_disabled","_loading","_maxDropdownItems","_app","_onSlotChange","bind","name","oldValue","newValue","placeholder","maxDropdownItems","loading","flags","buildFlags","parentDiv","attachShadow","mode","elmDiv","document","createElement","selectMenuInputSlot","setAttribute","innerHTML","appendChild","styleTag","Elm","Main","init","node","ports","errorMessage","subscribe","errorHandler","valueChanged","valueChangedHandler","blurInput","inputFilterElement","shadowRoot","getElementById","blur","focusInput","window","requestAnimationFrame","focus","slot","querySelector","addEventListener","error","optionsJson","optionsChangedReceiver","send","updateWidth","console","dropdownElement","selectBoxWidthChangedReceiver","offsetWidth","trim","size","allowMultiSelect","JSON","stringify","valuesTuple","valueTuple","join","addOptions","addOptionsReceiver","removeOptions","removeOptionsReceiver","selectOptionReceiver","deselectOptionReceiver","values","split","valueChangedReceiver","placeholderChangedReceiver","removeAttribute","disableChangedReceiver","parseInt","maxDropdownItemsChangedReceiver","loadingChangedReceiver"],"mappings":"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","file":"much-select.js","sourceRoot":"../src","sourcesContent":["// noinspection ES6CheckImport\nimport { Elm } from \"./Main.elm\";\n\nconst buildOptionsFromSelectElement = (selectElement) => {\n  const options = [];\n  const optionElements = selectElement.querySelectorAll(\"option\");\n  optionElements.forEach((optionElement, optionIndex) => {\n    let value;\n    if (optionElement.hasAttribute(\"value\")) {\n      value = optionElement.getAttribute(\"value\");\n    } else {\n      value = optionElement.innerText;\n    }\n    const option = { value };\n    option.label = optionElement.innerText;\n    option.index = optionIndex;\n    if (optionElement.hasAttribute(\"selected\")) {\n      const optionSelectedValue = optionElement.getAttribute(\"selected\");\n      option.selected = optionSelectedValue !== \"false\";\n    }\n    if (optionElement.parentElement.tagName === \"OPTGROUP\") {\n      option.group = optionElement.parentElement.getAttribute(\"label\");\n    }\n    if (optionElement.dataset.description) {\n      option.description = optionElement.dataset.description;\n    }\n    option.disabled = optionElement.hasAttribute(\"disabled\");\n    options.push(option);\n  });\n  return options;\n};\n\nconst notNullOrUndefined = (thing) => thing !== null && thing !== undefined;\n\nconst stringToOptionObject = (str) => {\n  return {\n    value: str,\n    label: str,\n  };\n};\n\nconst numberToOptionObject = (num) => {\n  return {\n    value: `${num}`,\n    label: `${num}`,\n  };\n};\n\nconst cleanUpOption = (option) => {\n  if (typeof option === \"string\") {\n    return stringToOptionObject(option);\n  }\n  if (typeof option === \"number\") {\n    return numberToOptionObject(option);\n  }\n  if (typeof option === \"object\") {\n    const optionMap = new Map();\n    if (notNullOrUndefined(option.value)) {\n      optionMap.set(\"value\", `${option.value}`);\n    }\n\n    if (notNullOrUndefined(option.label)) {\n      optionMap.set(\"label\", `${option.label}`);\n    }\n\n    if (notNullOrUndefined(option.description)) {\n      optionMap.set(\"description\", option.description);\n    }\n\n    if (notNullOrUndefined(option.disabled)) {\n      optionMap.set(\"disabled\", !!option.disabled);\n    }\n\n    if (notNullOrUndefined(option.index)) {\n      if (typeof option.index === \"number\") {\n        optionMap.set(\"index\", Math.floor(option.index));\n      } else {\n        throw new TypeError(\"option index in not a valid value\");\n      }\n    }\n\n    if (optionMap.has(\"value\") && !optionMap.has(\"label\")) {\n      return {\n        label: optionMap.get(\"value\"),\n        value: optionMap.get(\"value\"),\n        description: optionMap.get(\"description\"),\n        disabled: optionMap.get(\"disabled\"),\n        index: optionMap.get(\"index\"),\n      };\n    }\n    if (optionMap.has(\"label\") && !optionMap.has(\"value\")) {\n      return {\n        label: optionMap.get(\"label\"),\n        value: optionMap.get(\"label\"),\n        description: optionMap.get(\"description\"),\n        disabled: optionMap.get(\"disabled\"),\n        index: optionMap.get(\"index\"),\n      };\n    }\n    return {\n      label: optionMap.get(\"label\"),\n      value: optionMap.get(\"value\"),\n      description: optionMap.get(\"description\"),\n      disabled: optionMap.get(\"disabled\"),\n      index: optionMap.get(\"index\"),\n    };\n  }\n\n  throw new TypeError(\"Invalid option\");\n};\n\nconst cleanUpOptions = (options) => options.map(cleanUpOption);\n\n// adapted from https://github.com/thread/elm-web-components\n\nclass MuchSelect extends HTMLElement {\n  constructor() {\n    super();\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this._selected = null;\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this._placeholder = null;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this._disabled = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this._loading = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._maxDropdownItems = 10000;\n\n    /**\n     * @type {null|object}\n     * @private\n     */\n    this._app = null;\n\n    this._onSlotChange = this._onSlotChange.bind(this);\n  }\n\n  static get observedAttributes() {\n    return [\n      \"selected\",\n      \"disabled\",\n      \"placeholder\",\n      \"loading\",\n      \"max-dropdown-items\",\n    ];\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"selected\") {\n      if (oldValue !== newValue) {\n        this.selected = newValue;\n      }\n    } else if (name === \"placeholder\") {\n      if (oldValue !== newValue) {\n        this.placeholder = newValue;\n      }\n    } else if (name === \"disabled\") {\n      if (oldValue !== newValue) {\n        this.disabled = newValue;\n      }\n    } else if (name === \"max-dropdown-items\") {\n      if (oldValue !== newValue) {\n        this.maxDropdownItems = newValue;\n      }\n    } else if (name === \"loading\") {\n      if (oldValue !== newValue) {\n        this.loading = newValue;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  connectedCallback() {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      const flags = this.buildFlags();\n\n      // User shadow DOM.\n      const parentDiv = this.attachShadow({ mode: \"open\" });\n\n      const elmDiv = document.createElement(\"div\");\n      const selectMenuInputSlot = document.createElement(\"slot\");\n      selectMenuInputSlot.setAttribute(\"name\", \"select-input\");\n\n      parentDiv.innerHTML = \"\";\n      parentDiv.appendChild(this.styleTag);\n      parentDiv.appendChild(elmDiv);\n      parentDiv.appendChild(selectMenuInputSlot);\n\n      // noinspection JSUnresolvedVariable\n      this._app = Elm.Main.init({\n        flags,\n        node: elmDiv,\n      });\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.errorMessage.subscribe(this.errorHandler.bind(this));\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.valueChanged.subscribe(\n        this.valueChangedHandler.bind(this)\n      );\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.blurInput.subscribe(() => {\n        const inputFilterElement = this.shadowRoot.getElementById(\n          \"input-filter\"\n        );\n        if (inputFilterElement) {\n          inputFilterElement.blur();\n        }\n      });\n\n      // noinspection JSUnresolvedVariable,JSIgnoredPromiseFromCall\n      this._app.ports.focusInput.subscribe(() => {\n        window.requestAnimationFrame(() => {\n          const inputFilterElement = this.shadowRoot.getElementById(\n            \"input-filter\"\n          );\n          if (inputFilterElement) {\n            this.shadowRoot.getElementById(\"input-filter\").focus();\n          }\n        });\n      });\n\n      const slot = this.shadowRoot.querySelector(\"slot[name=select-input]\");\n      if (slot) {\n        slot.addEventListener(\"slotchange\", this._onSlotChange);\n      }\n    } catch (error) {\n      // TODO Do something interesting here\n      throw error;\n    }\n  }\n\n  _onSlotChange() {\n    const selectElement = this.querySelector(\"select\");\n    if (selectElement) {\n      const optionsJson = buildOptionsFromSelectElement(selectElement);\n\n      // noinspection JSUnresolvedVariable\n      this._app.ports.optionsChangedReceiver.send(optionsJson);\n      this.updateWidth();\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  errorHandler(error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n\n  /**\n   * This method updates the width this widget when it's not selected, so when it is selected it matches the\n   *  input element.\n   * This needs to be called very time the options change.\n   */\n  updateWidth() {\n    const dropdownElement = this.shadowRoot.getElementById(\"dropdown\");\n    if (dropdownElement) {\n      // noinspection JSUnresolvedVariable\n      this._app.ports.selectBoxWidthChangedReceiver.send(\n        dropdownElement.offsetWidth\n      );\n    }\n  }\n\n  buildFlags() {\n    const flags = {};\n    if (this.selected) {\n      flags.value = this.selected;\n    } else {\n      flags.value = \"\";\n    }\n\n    if (this.hasAttribute(\"placeholder\")) {\n      flags.placeholder = this.getAttribute(\"placeholder\").trim();\n    } else {\n      flags.placeholder = \"\";\n    }\n\n    if (this.hasAttribute(\"size\")) {\n      flags.size = this.getAttribute(\"size\").trim();\n    } else {\n      flags.size = \"\";\n    }\n\n    if (this.hasAttribute(\"multi-select\")) {\n      flags.allowMultiSelect = this.getAttribute(\"multi-select\") !== \"false\";\n    } else {\n      flags.allowMultiSelect = false;\n    }\n\n    flags.disabled = this.disabled;\n    flags.loading = this.loading;\n    flags.maxDropdownItems = this.maxDropdownItems;\n\n    const selectElement = this.querySelector(\"select\");\n    if (selectElement) {\n      flags.optionsJson = JSON.stringify(\n        buildOptionsFromSelectElement(selectElement)\n      );\n    } else {\n      flags.optionsJson = JSON.stringify([]);\n    }\n\n    if (this.hasAttribute(\"selected\")) {\n      flags.value = this.getAttribute(\"selected\");\n    }\n\n    return flags;\n  }\n\n  valueChangedHandler(valuesTuple) {\n    // TODO perhaps this delimiter should be configurable\n    this.selected = valuesTuple.map((valueTuple) => valueTuple[0]).join(\",\");\n    this.updateWidth();\n  }\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(value) {\n    this.setAttribute(\"selected\", value);\n\n    if (value) {\n      // TODO perhaps this delimiter should be configurable\n      const values = value.split(\",\");\n\n      // TODO Convert this._app to a function that get a promise that returns _app\n      //  when it is ready.\n      // noinspection JSUnresolvedVariable\n      this._app.ports.valueChangedReceiver.send(values);\n    } else {\n      // TODO Convert this._app to a function that get a promise that returns _app\n      //  when it is ready.\n      // noinspection JSUnresolvedVariable\n      this._app.ports.valueChangedReceiver.send([]);\n    }\n  }\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(placeholder) {\n    this.setAttribute(\"placeholder\", placeholder);\n    // TODO Convert this._app to a function that get a promise that returns _app\n    //  when it is ready.\n    // noinspection JSUnresolvedVariable\n    this._app.ports.placeholderChangedReceiver.send(placeholder);\n\n    this._placeholder = placeholder;\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    if (value === \"false\") {\n      this._disabled = false;\n    } else {\n      this._disabled = !!value;\n    }\n\n    if (this._disabled) {\n      this.setAttribute(\"disabled\", \"disabled\");\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n    // noinspection JSUnresolvedVariable\n    this._app.ports.disableChangedReceiver.send(this._disabled);\n  }\n\n  get maxDropdownItems() {\n    return this._maxDropdownItems;\n  }\n\n  set maxDropdownItems(value) {\n    let newValue;\n    if (typeof value === \"number\") {\n      newValue = Math.floor(value);\n    } else if (typeof value === \"string\") {\n      newValue = Math.floor(parseInt(value, 10));\n    } else {\n      throw new TypeError(\"Max dropdown items must be a number!\");\n    }\n    if (newValue < 3) {\n      this._maxDropdownItems = 3;\n    } else {\n      this._maxDropdownItems = newValue;\n      this.setAttribute(\"max-dropdown-items\", newValue);\n    }\n    // noinspection JSUnresolvedVariable\n    this._app.ports.maxDropdownItemsChangedReceiver.send(\n      this._maxDropdownItems\n    );\n  }\n\n  get loading() {\n    return this._loading;\n  }\n\n  set loading(value) {\n    if (value === \"false\") {\n      this._loading = false;\n    } else {\n      this._loading = !!value;\n    }\n    if (this._loading) {\n      this.setAttribute(\"loading\", \"loading\");\n    } else {\n      this.removeAttribute(\"loading\");\n    }\n    // noinspection JSUnresolvedVariable\n    this._app.ports.loadingChangedReceiver.send(this._loading);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get styleTag() {\n    const styleTag = document.createElement(\"style\");\n    styleTag.innerHTML = `\n\n      slot[name='select-input'] {\n        display: none;\n      }\n\n      #wrapper {\n        margin-top: auto;\n        margin-bottom: auto;\n        position: relative;\n      }\n\n      #input-filter {\n        height: 36px;\n        position: relative;\n        font-size: 25px;\n      }\n\n      #select-box {\n        min-height: 36px;\n        position: absolute;\n        top: 0px;\n        border: 1px solid darkgray;\n        margin-top: auto;\n        margin-bottom: auto;\n        padding: 2px 3px;\n        cursor: pointer;\n      }\n\n      #select-box.disabled {\n        border: 1px solid lightgray;\n        cursor: pointer;\n      }\n\n      #select-box .placeholder {\n        color: silver;\n        font-size: 25px;\n        vertical-align: middle;\n      }\n\n      #select-box .value {\n        color: black;\n        font-size: 25px;\n        vertical-align: middle;\n      }\n\n      #select-box.single {\n        background-image: linear-gradient(to bottom, #fefefe, #f2f2f2);\n        background-repeat: repeat-x;\n      }\n\n      #select-box.single.disabled {\n        background-image: none;\n      }\n\n      #select-indicator {\n        position: absolute;\n        right: 3px;\n        top: 3px;\n        cursor: pointer;\n      }\n\n      slot[name='loading-indicator'] {\n        display: block;\n        position: absolute;\n        right: 5px;\n        top: 10px;\n      }\n\n      #dropdown {\n        background-color: #EEEEEE;\n        visibility: hidden;\n        padding: 5px;\n        position: absolute;\n        top: 50px;\n        left: 0px;\n        font-size: 20px;\n        min-width: 200px;\n        display: inline-block;\n        z-index: 10;\n      }\n      #dropdown.showing {\n        visibility: visible;\n      }\n      #dropdown.hiding {\n        visibility: hidden;\n      }\n      .optgroup {\n        background-color: gray;\n        font-size: 0.85rem;\n        font-weight: 300;\n        padding: 5px;\n      }\n      .option {\n        background-color: silver;\n        padding: 5px;\n        cursor: pointer;\n      }\n\n      .option.selected {\n        background-color: darkslategrey;\n        color: ghostwhite;\n        cursor: pointer;\n      }\n\n      .option.highlighted {\n        background-color: indigo;\n        color: ghostwhite;\n      }\n\n      .option.disabled {\n        display: none;\n      }\n\n      .description {\n        font-size: 0.85rem;\n        padding: 3px;\n      }\n      .highlight { color: blue }`;\n\n    return styleTag;\n  }\n\n  updateOptions(options) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.optionsChangedReceiver.send(cleanUpOptions(options));\n    this.updateWidth();\n  }\n\n  addOption(option) {\n    this.addOptions([option]);\n  }\n\n  addOptions(options) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.addOptionsReceiver.send(cleanUpOptions(options));\n    this.updateWidth();\n  }\n\n  removeOption(option) {\n    this.removeOptions([option]);\n  }\n\n  removeOptions(options) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.removeOptionsReceiver.send(cleanUpOptions(options));\n    this.updateWidth();\n  }\n\n  selectOption(option) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.selectOptionReceiver.send(cleanUpOption(option));\n  }\n\n  deselectOption(option) {\n    // noinspection JSUnresolvedVariable\n    this._app.ports.deselectOptionReceiver.send(cleanUpOption(option));\n  }\n}\n\nexport default MuchSelect;\n"]}